import { makeRegExp } from 'regexp-master';
import { jesmylTgBot } from '../bot';
import { tgBotUrlController } from '../complect/url-controller';
import { tglogger } from '../log/log-bot';
import { JesmylTelegramBot } from '../tg-bot';

export const gul94iTelegramBot = new JesmylTelegramBot({
  bot: jesmylTgBot,
  chatId: -1001862285194,
  logger: tglogger,
  uniqPrefix: '@',
});

export const gul94iAdminTelegramBot = new JesmylTelegramBot({
  bot: jesmylTgBot,
  chatId: -1002202471829,
  logger: tglogger,
  uniqPrefix: '@!',
});

gul94iTelegramBot.onChatMessages((bot, message) => {
  if (message.text?.toLowerCase() === '–º–∞—Ç—é–∫–∏') {
    bot.deleteMessage(message.message_id, message.chat.id);
  }
});

const msgForCheck = '–ø—Ä–æ–≤';
const msgForPublicate = '–ø—É–±!';
const spoilerDiv = `<span class="tg-spoiler">-------------------------</span>`;

const makeAndSendPoll = async (text: string, chatId: number) => {
  const [head, ...options] = text.split(makeRegExp('/\n{2,}/'));
  const aboutLabelMatch = head.match(makeRegExp('/^(–û–±? .+)$/m'));

  if (aboutLabelMatch === null) return;

  const [, aboutLabel] = aboutLabelMatch;
  const sentOptions = options.map(option => option.slice(0, 100));

  await jesmylTgBot.bot.sendPoll(
    chatId,
    `#–ß–ê–û–ø—Ä–æ—Å\n\n–ß–µ—Å—Ç–Ω–æ. –ê–Ω–æ–Ω–∏–º–Ω–æ. ${aboutLabel}\n\n-------------------------\n\n` +
      `–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç –Ω–∞—Å —Ö–æ—Ç—è—Ç —É—Å–ª—ã—à–∞—Ç—å, –Ω–æ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å - –Ω–µ —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ. ` +
      `–≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç—ã, –∫–∞–∫ –æ–Ω–æ –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è ü§ó`,
    sentOptions,
    {
      allows_multiple_answers: true,
      is_anonymous: true,
      explanation_parse_mode: 'HTML',
    },
  );

  sentOptions.forEach((sentOption, sentOptioni) => {
    if (sentOption.length !== options[sentOptioni]?.length) {
      gul94iAdminTelegramBot.postMessage(
        spoilerDiv +
          `\n\n${sentOptioni + 1}-–π –ø—É–Ω–∫—Ç –≤–æ–π–¥—ë—Ç –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é!\n\n` +
          options[sentOptioni] +
          `\n\n<b>—Å—Ç–∞–ª–æ:</b>\n${sentOption}\n\n` +
          spoilerDiv,
        { parse_mode: 'HTML' },
      );
    }
  });
};

gul94iAdminTelegramBot.onChatMessages(async (bot, message) => {
  if (message.text == null) return;
  const chaoHashTagRegExp = makeRegExp('/#–ß–ê–û–ø—Ä–æ—Å/i');

  if (message.reply_to_message?.text?.match(chaoHashTagRegExp) != null) {
    if (message.text === msgForPublicate) {
      makeAndSendPoll(message.reply_to_message.text, gul94iTelegramBot.chatId);
      await bot.deleteMessage(message.message_id);

      bot.postMessage('–û–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', {
        reply_to_message_id: message.reply_to_message.message_id,
      });
    }

    if (message.text === msgForCheck) {
      makeAndSendPoll(message.reply_to_message.text, gul94iAdminTelegramBot.chatId);
      await bot.deleteMessage(message.message_id);
    }

    return;
  }

  if (message.text.match(chaoHashTagRegExp)) {
    bot.postMessage(
      `#–ß–ê–û–ø—Ä–æ—Å\n\n` +
        `—Å–¥–µ–ª–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ—ë üëÜüèª —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã:\n` +
        `-- –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å - "${msgForPublicate}";\n` +
        `-- –ø—Ä–æ–≤–µ—Ä–∏—Ç—å - "${msgForCheck}"`,
      { reply_to_message_id: message.message_id },
    );
  }
});

tgBotUrlController(gul94iTelegramBot, gul94iAdminTelegramBot);
